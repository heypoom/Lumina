extern crate glium;

use self::glium::*;
use self::glium::backend::*;

#[derive(Copy, Clone)]
pub struct Vertex {
  position: [f32; 2]
}

impl Vertex {
  fn new(x: f32, y: f32) -> Vertex {
    Vertex { position: [x, y] }
  }
}

implement_vertex!(Vertex, position);

pub fn render(display: Display) {
  let mut target = display.draw();
  target.clear_color(0.93, 0.93, 0.93, 1.0);
  target.finish().unwrap();

  let v1 = Vertex::new(-0.5, -0.5);
  let v2 = Vertex::new(0.0, 0.5);
  let v3 = Vertex::new(0.5, -0.25);

  let shape = vec![v1, v2, v3];
  let vertex_buffer = VertexBuffer::new(&display, &shape).unwrap();
  let indices = index::NoIndices(index::PrimitiveType::TrianglesList);

  let vertex_shader_src = r#"
      #version 140

      in vec2 position;

      void main() {
          gl_Position = vec4(position, 0.0, 1.0);
      }
  "#;

  let fragment_shader_src = r#"
      #version 140

      out vec4 color;

      void main() {
          color = vec4(1.0, 0.0, 0.0, 1.0);
      }
  "#;

  let program = Program::from_source(&display, vertex_shader_src, fragment_shader_src, None).unwrap();
}
